generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(100)
  recipes recipes[]
}

model ingredients {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(255)
  unit                String                @db.VarChar(50)
  recipe_ingredients  recipe_ingredients[]
  shopping_list_items shopping_list_items[]
}

model nutrition_facts {
  id                 Int      @id @default(autoincrement())
  recipe_id          Int?
  calories           Decimal? @db.Decimal(10, 2)
  total_fat          Decimal? @db.Decimal(10, 2)
  saturated_fat      Decimal? @db.Decimal(10, 2)
  cholesterol        Decimal? @db.Decimal(10, 2)
  sodium             Decimal? @db.Decimal(10, 2)
  potassium          Decimal? @db.Decimal(10, 2)
  total_carbohydrate Decimal? @db.Decimal(10, 2)
  sugars             Decimal? @db.Decimal(10, 2)
  protein            Decimal? @db.Decimal(10, 2)
  recipes            recipes? @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recipe_ingredients {
  id            Int          @id @default(autoincrement())
  recipe_id     Int?
  ingredient_id Int?
  quantity      Decimal      @db.Decimal(10, 2)
  ingredients   ingredients? @relation(fields: [ingredient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipes       recipes?     @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recipes {
  id                 Int                  @id @default(autoincrement())
  user_id            Int?
  category_id        Int?
  title              String               @db.VarChar(255)
  description        String?
  instructions       String
  image_url          String?
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  nutrition_facts    nutrition_facts[]
  recipe_ingredients recipe_ingredients[]
  categories         categories?          @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users              users?               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model shopping_list_items {
  id               Int             @id @default(autoincrement())
  shopping_list_id Int?
  ingredient_id    Int?
  quantity         Decimal         @db.Decimal(10, 2)
  purchased        Boolean?        @default(false)
  ingredients      ingredients?    @relation(fields: [ingredient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shopping_lists   shopping_lists? @relation(fields: [shopping_list_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model shopping_lists {
  id                  Int                   @id @default(autoincrement())
  user_id             Int?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  shopping_list_items shopping_list_items[]
  users               users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(50)
  email          String           @unique @db.VarChar(100)
  password_hash  String
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  recipes        recipes[]
  shopping_lists shopping_lists[]
}
