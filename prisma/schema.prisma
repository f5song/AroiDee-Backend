generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model recipes {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  category_id        Int?
  title              String
  description        String?
  instructions       Json
  image_url          String?
  created_at         DateTime             @default(now())
  cook_time          Int                  @default(0)
  rating             Decimal?             @db.Decimal
  nutrition_facts    nutrition_facts[]
  recipe_categories  recipe_categories[]
  recipe_ingredients recipe_ingredients[]
  user               users                @relation(fields: [user_id], references: [id])
  saved_recipes      saved_recipes[]
  categories         categories[]         @relation("RecipeCategories")
  meals              meals[]
}

model categories {
  id                Int                 @id @default(autoincrement())
  name              String
  image_url         String?
  recipe_categories recipe_categories[]
  recipes           recipes[]           @relation("RecipeCategories")
  meals             meals[]
}

model recipe_categories {
  recipe_id   Int
  category_id Int
  category    categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  recipe      recipes    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

  @@id([recipe_id, category_id])
}

model ingredients {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(255)
  unit               String               @db.VarChar(50)
  recipe_ingredients recipe_ingredients[]
}

model nutrition_facts {
  id                 Int      @id @default(autoincrement())
  recipe_id          Int?
  calories           Decimal? @db.Decimal(10, 2)
  total_fat          Decimal? @db.Decimal(10, 2)
  saturated_fat      Decimal? @db.Decimal(10, 2)
  cholesterol        Decimal? @db.Decimal(10, 2)
  sodium             Decimal? @db.Decimal(10, 2)
  potassium          Decimal? @db.Decimal(10, 2)
  total_carbohydrate Decimal? @db.Decimal(10, 2)
  sugars             Decimal? @db.Decimal(10, 2)
  protein            Decimal? @db.Decimal(10, 2)
  recipes            recipes? @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recipe_ingredients {
  id            Int          @id @default(autoincrement())
  recipe_id     Int?
  ingredient_id Int?
  quantity      Decimal      @db.Decimal(10, 2)
  ingredients   ingredients? @relation(fields: [ingredient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipes       recipes?     @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int       @id @default(autoincrement())
  username       String
  email          String    @unique
  password_hash  String?
  created_at     DateTime  @default(now())
  image_url      String?
  google_id      String?   @unique
  provider       String?   // 'email', 'google', etc.
  recipes        recipes[]
  saved_recipes  saved_recipes[]
  meals          meals[]
  calories_goal Int?
}

model saved_recipes {
  id        Int       @id @default(autoincrement())
  user_id   Int?
  recipe_id Int?
  saved_at  DateTime? @default(now()) @db.Timestamp(6)
  recipes   recipes?  @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, recipe_id])
}

model meals {
  id          Int      @id @default(autoincrement())
  user_id     Int
  recipe_id   Int
  date        DateTime
  category_id Int // ใช้แทน meal_type
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  recipe   recipes    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  category categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([user_id, date])
}
